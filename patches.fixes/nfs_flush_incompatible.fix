From: NeilBrown <neilb@suse.de>
Subject: NFS: make nfs_flush_incompatible more generous
Patch-mainline: v4.5
Git-commit: 138a2935dc9783b131d9647c3bddb22ae5c84d77
References: bnc#816099

[note: upstream commit is different in some details.
 Having rejected my patch in 2013, Trond wrote his own
 to do the same thing 2 years later.  Ho-hum]

If two processes open the same NFS file and write to it, then they are
currently considered to be separate clients and when one writes, all
changes from the other are flushed first.

This affects memory mappings as well, so if the file is mmapped using two
separate opens, then an update from one will flush all changes from
the other.

This can be a serious performance problem.

So change the tests so that if different credentials or different
locks are involved we still flush, but simple accesses by the same
user do not cause flushes.

Upstream (Trond) currently doesn't like this because it means that
errors can end up going back to the "wrong" application.  I think this
is a fairly meaningless concern.

Signed-off-by: Neil Brown <neilb@suse.de>

---
 fs/nfs/write.c |   12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

--- a/fs/nfs/write.c
+++ b/fs/nfs/write.c
@@ -1128,7 +1128,7 @@ int nfs_flush_incompatible(struct file *
 		if (req == NULL)
 			return 0;
 		l_ctx = req->wb_lock_context;
-		do_flush = req->wb_page != page || req->wb_context != ctx;
+		do_flush = req->wb_page != page;
 		/* for now, flush if more than 1 request in page_group */
 		do_flush |= req->wb_this_page != req;
 		if (l_ctx && flctx &&
@@ -1137,6 +1137,16 @@ int nfs_flush_incompatible(struct file *
 			do_flush |= l_ctx->lockowner.l_owner != current->files
 				|| l_ctx->lockowner.l_pid != current->tgid;
 		}
+		if (req->wb_context != ctx) {
+			do_flush |=
+				(req->wb_context->dentry != ctx->dentry ||
+				 req->wb_context->cred != ctx->cred );
+			if (req->wb_context->state || ctx->state)
+				do_flush |=
+					(req->wb_lock_context->lockowner.l_owner != current->files ||
+					 req->wb_lock_context->lockowner.l_pid != current->tgid);
+		}
+
 		nfs_release_request(req);
 		if (!do_flush)
 			return 0;

From: Jan Kara <jack@suse.cz>
Subject: xfs: Silence warnings in xfs_vm_releasepage()
References: bnc#915183 bsc#987565
Git-commit: 0a417b8dc1f10b03e8f558b8a831f07ec4c23795
Patch-mainline: v4.10-rc4

XFS can not handle dirty pages in xfs_vm_releasepage(). Normally this is not a
problem as most callers of try_to_release_page() do writeout of dirty pages
before releaseing them. However, we can (rarely) get called from
shrink_active_list() which does *not* do writeout before releasepage. XFS
handles this correctly by returning 0 when it sees delalloc buffers on the
page, but it produces an ugly warning every time this happens. We don't want to
remove the warning because it has helped find bugs before, but we also clearly
can't continue to warn when this happens.

The situation is more complicated by the fact that xfs_vm_invalidatepage() ends
up calling xfs_vm_releasepage() as well (through block_invalidatepage()). That
happens when buffers are cleared (so try_to_free_buffers() succeeds) but the
page is still dirty so we cannot just skip a dirty page as that would break
truncate(2). 

So we just restrict the warning to the case when we see delalloc or unwritten
buffers in a clean page.

Signed-off-by: Jan Kara <jack@suse.cz>

---
 fs/xfs/xfs_aops.c |    8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@ -1229,10 +1229,14 @@ xfs_vm_releasepage(
 
 	xfs_count_page_state(page, &delalloc, &unwritten);
 
-	if (WARN_ON_ONCE(delalloc))
+	if (delalloc) {
+		WARN_ON_ONCE(!PageDirty(page));
 		return 0;
-	if (WARN_ON_ONCE(unwritten))
+	}
+	if (unwritten) {
+		WARN_ON_ONCE(!PageDirty(page));
 		return 0;
+	}
 
 	return try_to_free_buffers(page);
 }
